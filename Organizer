#include <iostream>
#include <sqlite3.h>

// Function to initialize the SQLite database
int initializeDatabase(sqlite3*& db) {
    int rc = sqlite3_open("bank_database.db", &db);
    if (rc) {
        std::cerr << "Can't open database: " << sqlite3_errmsg(db) << std::endl;
        return rc;
    }

    // Create a table to store customer data
    const char* createTableSQL =
        "CREATE TABLE IF NOT EXISTS customers ("
        "  customer_id INTEGER PRIMARY KEY AUTOINCREMENT,"
        "  first_name TEXT NOT NULL,"
        "  last_name TEXT NOT NULL,"
        "  account_balance REAL DEFAULT 0.0"
        ");";

    rc = sqlite3_exec(db, createTableSQL, 0, 0, 0);
    if (rc != SQLITE_OK) {
        std::cerr << "SQL error: " << sqlite3_errmsg(db) << std::endl;
        sqlite3_close(db);
        return rc;
    }

    return SQLITE_OK;
}

// Function to add a new customer to the database
int addCustomer(sqlite3* db, const std::string& firstName, const std::string& lastName) {
    const char* insertSQL = "INSERT INTO customers (first_name, last_name) VALUES (?, ?);";

    sqlite3_stmt* stmt;
    int rc = sqlite3_prepare_v2(db, insertSQL, -1, &stmt, 0);
    if (rc != SQLITE_OK) {
        std::cerr << "SQL error: " << sqlite3_errmsg(db) << std::endl;
        return rc;
    }

    sqlite3_bind_text(stmt, 1, firstName.c_str(), -1, SQLITE_STATIC);
    sqlite3_bind_text(stmt, 2, lastName.c_str(), -1, SQLITE_STATIC);

    rc = sqlite3_step(stmt);
    if (rc != SQLITE_DONE) {
        std::cerr << "SQL error: " << sqlite3_errmsg(db) << std::endl;
        return rc;
    }

    sqlite3_finalize(stmt);
    return SQLITE_OK;
}

int main() {
    sqlite3* db;
    int rc = initializeDatabase(db);
    if (rc != SQLITE_OK) {
        return 1;
    }

    // Add a customer to the database
    rc = addCustomer(db, "John", "Doe");
    if (rc != SQLITE_OK) {
        std::cerr << "Failed to add a customer." << std::endl;
        return 1;
    }

    // Close the database connection when done
    sqlite3_close(db);

    return 0;
}
